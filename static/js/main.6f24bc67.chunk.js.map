{"version":3,"sources":["components/MemoryCardFront/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["MemoryCardFront","props","react_default","a","createElement","className","onClick","selectCard","id","alt","name","src","image","Wrapper","children","Title","selectedCards","App","state","pokemon","includes","push","_this","setState","_this2","this","shuffledCards","array","i","length","j","Math","floor","random","temp","shuffleArray","components_Wrapper","components_Title","map","components_MemoryCardFront","h","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"43GAgBeA,MAbf,SAAyBC,GACvB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OACIC,UAAU,gBACVC,QAAS,kBAAML,EAAMM,WAAWN,EAAMO,MAEtCN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,iBCHhCC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCG1BC,MAJf,SAAed,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMa,kBCcjCE,SAAgB,IAyCNC,6MArCXC,MAAQ,CACJC,UACAH,mBAGJT,WAAa,SAAAC,GACTQ,EAAcI,SAASZ,GAAMQ,EAAgB,GAAKA,EAAcK,KAAKb,GACrEc,EAAKC,SAAS,CAAEP,2FAGX,IAAAQ,EAAAC,KACCC,EA1BQ,SAAAC,GAElB,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACf,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEf,OAAOP,EAkBmBQ,CAAaV,KAAKP,MAAMC,SAC9C,OACIjB,EAAAC,EAAAC,cAACgC,EAAD,KACIlC,EAAAC,EAAAC,cAACiC,EAAD,KAEQnC,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOI,IAAI,eAAeE,IAAI,4HAC7CT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,UAAoCoB,KAAKP,MAAMF,cAAca,UAIxEH,EAAcY,IAAI,SAAAnB,GAAO,OACtBjB,EAAAC,EAAAC,cAACmC,EAAD,CACIhC,WAAYiB,EAAKjB,WACjBC,GAAIW,EAAQX,GACZgC,GAAC,EACDC,IAAKtB,EAAQX,GACbE,KAAMS,EAAQT,KACdE,MAAOO,EAAQP,kBA/BrB8B,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6f24bc67.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction MemoryCardFront(props) {\n  return (\n      <div className=\"card\">\n          <div\n              className=\"img-container\"\n              onClick={() => props.selectCard(props.id)}\n          >\n              <img alt={props.name} src={props.image} />\n          </div>\n      </div>\n  );\n}\n\nexport default MemoryCardFront;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from 'react';\nimport MemoryCardFront from \"./components/MemoryCardFront\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport pokemon from \"./pokemon.json\";\nimport './App.css';\n\n const shuffleArray = array => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n }\n\n var selectedCards = [];\n\nclass App extends Component {\n    \n    state = {\n        pokemon,\n        selectedCards\n    };\n\n    selectCard = id => {\n        selectedCards.includes(id) ? selectedCards = [] : selectedCards.push(id);\n        this.setState({ selectedCards });\n    };\n\n    render() {\n        const shuffledCards = shuffleArray(this.state.pokemon);\n        return (\n            <Wrapper>\n                <Title>\n                    {\n                        <p>\n                            <img className=\"logo\" alt=\"Pokemon Logo\" src=\"https://vignette.wikia.nocookie.net/pokemon/images/9/9f/Pok%C3%A9monLogo%28Eng%29.png/revision/latest?cb=20090304221051\" />\n                            <div className=\"scoreboard\">Score: {this.state.selectedCards.length}</div>\n                        </p>\n                    }\n                </Title>\n                {shuffledCards.map(pokemon => (\n                    <MemoryCardFront\n                        selectCard={this.selectCard}\n                        id={pokemon.id}\n                        h\n                        key={pokemon.id}\n                        name={pokemon.name}\n                        image={pokemon.image}\n                    />\n                ))}\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}